{"version":3,"file":"static/js/458.f66b428b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.jsx","webpack://react-homework-template/./src/components/FormPhoneBook/FormPhoneBook.module.css?2bb4","../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js","components/FormPhoneBook/FormPhoneBook.jsx","components/Filter/Filter.jsx","redux/contacts/selector-contacts.js","components/PageForm/PageForm.jsx","pages/PhoneBook/PhoneBook.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"block\":\"Contact_block__q6y-5\",\"button\":\"Contact_button__F+kJb\"};","import styles from './Contact.module.css';\n// import { nanoid } from 'nanoid';ASK IVAN\nconst Contact = ({ contacts, deleteContact }) => {\n  const listContacts = contacts?.map(({ number, name, id }) => (\n    // <li key={nanoid()}>ASK IVAN\n    <li key={id}>\n      {name} : {number}{' '}\n      <button\n        type=\"button\"\n        className={styles.button}\n        onClick={() => deleteContact(id)}\n      >\n        Delete\n      </button>\n    </li>\n  ));\n\n  return (\n    <div className={styles.block}>\n      <h1>Contacts</h1>\n\n      <ul>{listContacts}</ul>\n    </div>\n  );\n};\nexport default Contact;\n","// extracted by mini-css-extract-plugin\nexport default {\"baseForm\":\"FormPhoneBook_baseForm__8Mde7\",\"button\":\"FormPhoneBook_button__EewPy\",\"input\":\"FormPhoneBook_input__bjsP2\",\"inputtitle\":\"FormPhoneBook_inputtitle__jR4mA\"};","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","import { useState, useMemo } from 'react';\nimport styles from './FormPhoneBook.module.css';\nimport { nanoid } from 'nanoid';\nconst INITIAL_State = {\n  name: '',\n  number: '',\n};\n\nconst FormPhonebook = ({ handlerFormSPhonebook }) => {\n  const idName = useMemo(() => nanoid(), []);\n  const idNumber = useMemo(() => nanoid(), []);\n  const [state, setState] = useState(INITIAL_State);\n\n  const reset = () => {\n    setState(INITIAL_State);\n  };\n  const handlerChange = ({ target }) => {\n    const { name, value } = target;\n    setState({\n      ...state,\n      [name]: value,\n    });\n  };\n\n  const handlerFormSubmit = e => {\n    e.preventDefault();\n    handlerFormSPhonebook({ ...state });\n    reset();\n  };\n\n  const { name, number } = state;\n\n  return (\n    <form className={styles.baseForm} onSubmit={handlerFormSubmit}>\n      <h1>Phonebook</h1>\n      <label htmlFor=\"contact-name\">Name</label>\n      <input\n        id={idName}\n        value={name}\n        type=\"text\"\n        required\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        onChange={handlerChange}\n      />\n\n      <label htmlFor=\"contact-namber\">Number</label>\n      <input\n        id={idNumber}\n        value={number}\n        type=\"tel\"\n        required\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        onChange={handlerChange}\n      />\n\n      <button\n        type=\"submit\"\n        className={styles.button}\n        // onClick={console.log('click')}\n      >\n        Add contact\n      </button>\n    </form>\n  );\n};\nexport default FormPhonebook;\n\n// class FormPhonebook extends Component {\n//   idName = nanoid();\n//   idNumber = nanoid();\n\n//   state={...INITIAL_State}\n\n//   handlerFormSubmit = (e) => {\n//     e.preventDefault();\n//     this.props.handlerFormSPhonebook({...this.state})\n//     this.reset()\n//   };\n\n//   handlerChange=({target})=>{\n//     const{name,value}=target\n//     this.setState({[name]:value})\n//   }\n//   reset(){\n//     this.setState({...INITIAL_State})\n//   }\n\n//   render() {\n//     const{idName,idNumber,handlerChange,handlerFormSubmit}= this\n//     const{ name,number}=this.state\n\n//        return (\n//       <form className={styles.baseForm}  onSubmit={handlerFormSubmit}>\n//         <h1>Phonebook</h1>\n//         <label htmlFor=\"contact-name\">Name</label>\n//         <input\n//           id={idName}\n//           value={name}\n//           type=\"text\"\n//           required name=\"name\"\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           onChange={handlerChange}\n//         />\n\n//         <label htmlFor=\"contact-namber\">Number</label>\n//         <input\n//           id={idNumber}\n//           value={number}\n//           type=\"tel\"\n//           required name=\"number\"\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           onChange={handlerChange}\n//         />\n\n//         <button type=\"submit\" className={styles.button}>\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n","import styles from \"../FormPhoneBook/FormPhoneBook.module.css\"\nconst Filter =({propsFilter})=>{\n\nreturn(\n    <>\n    <h1 className={styles.inputtitle}>Find contacts by name :</h1>\n     <input onChange={propsFilter} name=\"filter\" placeholder=\"Search\" className={styles.input} />\n     </>\n  )\n}\nexport default Filter","import { createSelector } from 'reselect';\n\nexport const selectContacts = store => store.contacts;\nexport const selectFilter = store => store.filter;\n\nexport const selectAllFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const { loading, error, items } = contacts;\n\n    if (!filter) {\n      return contacts;\n    }\n\n    const filterNormalize = filter.toLowerCase();\n    const filteredContacts = items.filter(el => {\n      const checkedEl = el.name.toLowerCase();\n      return checkedEl.includes(filterNormalize);\n    });\n\n    return {\n      items: filteredContacts,\n      loading,\n      error,\n    };\n  }\n);\n","import FormPhonebook from '../FormPhoneBook/FormPhoneBook';\nimport Contact from '../Contact/Contact';\nimport Filter from '../Filter/Filter';\nimport {\n  selectAllFilteredContacts,\n  selectContacts,\n} from '../../redux/contacts/selector-contacts';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filter/filter-slice';\nimport {\n  fetchContacts,\n  addContactInReduser,\n  deleteContactInReduser,\n} from '../../redux/contacts/contacts-operations';\nimport { useEffect } from 'react';\n\nconst PageForm = () => {\n  const { items } = useSelector(selectAllFilteredContacts);\n  const { error, loading } = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handlerFormSPhonebook = data => {\n    dispatch(addContactInReduser(data));\n  };\n\n  const deleteContactForm = id => {\n    dispatch(deleteContactInReduser(id));\n  };\n\n  const propsFilter = ({ target }) => dispatch(setFilter(target.value));\n\n  return (\n    <>\n      <FormPhonebook handlerFormSPhonebook={handlerFormSPhonebook} />\n      {loading && <p>...Loading</p>}\n      {error && <p>{error}</p>}\n      {Boolean(items.length) && (\n        <Contact contacts={items} deleteContact={deleteContactForm} />\n      )}\n      <Filter propsFilter={propsFilter} />\n    </>\n  );\n};\nexport default PageForm;\n","import PageForm from '../../components/PageForm/PageForm';\nconst PhoheBook = () => {\n  return (\n    <div>\n      <PageForm />\n    </div>\n  );\n};\nexport default PhoheBook;\n"],"names":["_ref","contacts","deleteContact","listContacts","map","_ref2","number","name","id","_jsxs","children","_jsx","type","className","styles","onClick","urlAlphabet","nanoid","size","arguments","length","undefined","bytes","crypto","getRandomValues","Uint8Array","INITIAL_State","handlerFormSPhonebook","idName","useMemo","idNumber","_useState","useState","_useState2","_slicedToArray","state","setState","handlerChange","target","value","_objectSpread","_defineProperty","onSubmit","e","preventDefault","htmlFor","required","pattern","title","onChange","propsFilter","_Fragment","placeholder","selectContacts","store","selectAllFilteredContacts","createSelector","filter","loading","error","items","filterNormalize","toLowerCase","el","includes","useSelector","_useSelector2","dispatch","useDispatch","useEffect","fetchContacts","FormPhonebook","data","addContactInReduser","Boolean","Contact","deleteContactInReduser","Filter","setFilter","PageForm"],"sourceRoot":""}